---
import { Image } from 'astro:assets';
import { getEntry, type CollectionEntry } from 'astro:content';
import { formatDate } from '../../helpers';
export type Props = {
    post?: CollectionEntry<'post'>['data'] & { slug: string };
    category?: string;
}
const { post, category } = Astro.props;
---

{ post ? (
    <article>
        <header>
            <h3>
                <a href={`/posts/${post.slug}`}>{post.title}</a>
            </h3>
            <div class="sub-header">
                <div>
                    <time datetime={post.published_at.toISOString()}>
                        {formatDate(post.published_at)}
                    </time>
                    <span>•</span>
                    <a href={`/categories/${post.category}`} hreflang="en-us">
                        {(await getEntry('category', post.category))?.data.title}
                    </a>
                </div>
                <div>
                    {post.tags.map(tag => (
                        <span data-tag>
                            {tag}
                        </span>
                    ))}
                </div>
            </div>
        </header>
        <div class="body">
            <div>
                <Image 
                    src={post.image} 
                    alt={post.title} 
                    format="avif"
                    loading="lazy"
                />
            </div>
            <p class="" style="line-height: 1.5rem; font-size: 1.15rem;">
                {post.summary}
            </p>
        </div>
    </article>
) : (
    <div class="no-post">
        <p style="display:flex; width:100%; text-align:center; padding:1rem; text-wrap:balance;flex-wrap: wrap;">
            No posts found {category && (
                <span>&nbsp;for category <em>{category}</em></span>
            )}
        </p>
    </div>
)}

<style>
    article, .no-post {
        margin: 0.4rem;
        margin-bottom: 3rem;
        border-radius: 1rem;
        max-width: min(120ch, 100%);
        background: 
			linear-gradient(
				transparent 10%,
				#fff
			),
            /*fixed */ repeating-linear-gradient(
                -45deg,
				#efefef,
				#efefefef 1px,
				transparent 1px,
				transparent 10px
            ), 
            /*fixed */ repeating-linear-gradient(
                45deg,
				#efefef,
				#efefefef 1px,
				transparent 1px,
				transparent 10px
            ),
            #f8f8f8ef;
    }
    .no-post {
        min-width: min(60ch, 100%);
        max-width: min(120ch, 100%);
        width: auto;
        justify-self: flex-start;
        justify-items: center;
        align-content: center;
        aspect-ratio: 16/4;
        padding: 0.4rem;
    }
    article header {
        display: flex;
        flex-direction: column;
        width: 100%;
        justify-content: center;
        align-items: center;
    }
    .sub-header {
        margin:  0 1rem 2rem;
    }
    article header > div {
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: center;
        gap: 3rem;

        div {
            display: flex;
            gap: 0.5rem;
            font-weight: 500;
            font-family: 'Atkinson Hyperlegible';

            time {
                font-size: 1.15rem;
                font-family: 'Syne Variable';
            }

            span {}

            a {
                font-size: 1.15rem;
            }

            [data-tag] {
                display: flex;
                align-items: center;
                font-size: 1.05rem;
                gap: 0;
            }
            [data-tag]::before {
                content: '#'; /*⌁⌂⌀†*/;
                font-size: 0.8rem;
                color: #444a;
            }
        }
    }
    article .body {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding-top: 1rem;
        font-family: 'Atkinson Hyperlegible', 'Roboto', Verdana, Geneva, Tahoma, sans-serif;
        border-top: 2px #efefef solid;
    }
    article .body div {
        flex: 0.6;
        height: auto;

        img {
            width: 100%;
            height: 100%;
            aspect-ratio: 4/3;
            object-fit: cover;
        }
    }
    article .body p {
        flex: 1;
        padding: 1rem;
        max-width: 60ch;
    }

    @media (max-width: 640px) {
        article header > .sub-header {
            flex-direction: column;
            justify-content: center;
            align-items: center;
            margin: 0 auto;
            padding: 0 auto;
            gap: 1rem;
            
            * {
                width: auto;
                flex-direction: row;
                justify-content: center;
            }
        }
        article .body {
            flex-direction: column;
            justify-content: center;
        }
        article .body p {
        }
    }
</style>