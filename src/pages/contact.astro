---
import { Slot } from "../components/main";
import Base from "../layouts/base.astro";
---

<Base title="Contact Me - Lazaro Osee">
    <Slot name="head">
		<meta name="author" content="Lazaro Osee" />
		<meta 
			name="description" 
			content="Contact Lazaro Osee, an Architecture Student and a 'self taught' Software Developer" 
		/>
		<meta 
			name="keywords" 
			content="Lazaro, Osee, Architect, Web, Software, Developer, Blog, Posts, Contact, Connection" 
		/>
    </Slot>
    <Slot name="default">
        <main class="font-atkinson">
            <section class="contact">
                <h1 class="font-syne-var">Get in contact with me</h1>
                <p class="subtitle">
                    Send a direct message to my inbox and get to connect with me
                </p>
                <form id="contact-form" method="post">
                    <fieldset>
                        <legend>Personnal Details</legend>
                        <label>
                            <span>Full name</span>
                            <small id="name_error" style="padding-left: 1rem; color: red;"></small>
                            <input
                                type="text"
                                name="fullname"
                                maxlength="150"
                                minlength="3"
                                required
                                aria-required="true"
                                placeholder="Enter your name..."
                            />
                        </label>
                        <label>
                            <span>Email</span>
                            <small id="email_error" style="padding-left: 1rem; color: red;"></small>
                            <input
                                type="email"
                                name="email"
                                required
                                aria-required="true"
                                placeholder="Enter your email..."
                            />
                        </label>
                        <label>
                            <span>Subject</span>
                            <small id="subject_error" style="padding-left: 1rem; color: red;"></small>
                            <input
                                type="text"
                                name="subject"
                                maxlength="200"
                                minlength="4"
                                required
                                aria-required="true"
                                placeholder="Subject of your message..."
                            />
                        </label>
                    </fieldset>
                    <fieldset>
                        <legend>
                            <label for="message">Message</label>
                        </legend>
                        <small id="message_error" style="padding-left: 1rem; color: red;"></small>
                        <textarea 
                            id="message" 
                            name="message"
                            required
                            aria-required="true"
                            minlength="12"
                            placeholder="I am interested in..."
                        ></textarea>
                    </fieldset>
                    <button type="submit" aria-label="submit contact form">
                        <ion-icon size="large" name="send" style="color: var(--submit-color, #444)"></ion-icon>
                        <span>Message</span>
                    </button>
                </form>
            </section>
        </main>
    </Slot>
</Base>

<script>
    import { actions, isInputError } from "astro:actions";
import DOMPurify from 'dompurify';
    const form = document.querySelector('form#contact-form') as HTMLFormElement;
    const name_error = document.querySelector('#name_error') as HTMLElement;
    const email_error = document.querySelector('#email_error') as HTMLElement;
    const subject_error = document.querySelector('#subject_error') as HTMLElement;
    const message_error = document.querySelector('#message_error') as HTMLElement;

    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        name_error.textContent = email_error.textContent =subject_error.textContent = message_error.textContent = ''
        const formData = new FormData(form);

        const sanitized = {
            fullname: DOMPurify.sanitize(formData.get('fullname')?.toString() ?? ''),
            subject: DOMPurify.sanitize(formData.get('subject')?.toString() ?? ''),
            message: DOMPurify.sanitize(formData.get('message')?.toString() ?? ''),
        };
        formData.set('fullname', sanitized.fullname)
        formData.set('subject', sanitized.subject)
        formData.set('message', sanitized.message)

        console.log(typeof formData.get('subject'))

        const { error } = await actions.contact(formData);
        if (error) {
            if (isInputError(error)) {
                if (error.fields.email) {
                    email_error.textContent = error.fields.email.join(', ')
                }
                if (error.fields.fullname) {
                    name_error.textContent = error.fields.fullname.join(', ')
                }
                if (error.fields.subject) {
                    subject_error.textContent = error.fields.subject.join(', ')
                }
                if (error.fields.message) {
                    message_error.textContent = error.fields.message.join(', ')
                }
            }
            else {
                console.dir(error, { colors: true, depth: Infinity })
            }
        }
    })
</script>

<style>
    main {
        justify-items: center;
        align-content: center;
    }
    .contact {
        margin: 1rem;
        padding: 0.6rem;
        width: min(60rem, 100%);
        /* border: 2px solid red; */
    }
    h1 {
        display: block;
        text-align: center;
        font-family: 'Syne Variable' !important;
    }
    form {
        padding: 0.6rem;
        justify-items: flex-end;
    }
    fieldset {
        display: block;
        width: 100%;
        padding: 0.5rem;
        margin-bottom: 1rem;
        border-radius: 0.6rem;
        border: 3px solid var(--color-white);
    }
    label {
        display: block;
        padding-block: 0.6rem 1rem;
        font-size: 1.15rem;
    }
    label span, label input, textarea {
        display: block;
        width: 100%;
        padding: 0.4rem;
        width: 100%;
        text-align: start;
    }
    label input {
        padding: 0.6rem 1rem;
        border: none;
        font-size: 1.15rem;
        outline-color: #0008;
        border-bottom: 2px solid var(--color-white);
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }
    label input:focus:focus-visible:focus-within {
        border: 2px solid var(--color-black);
    }
    legend {
        font-size: 1.25rem;
    }
    textarea {
        padding: 1rem;
        font-size: 1.05rem;
        font-family: 'Roboto', 'Atkinson Hyperlegible', Verdana, Geneva, Tahoma, sans-serif;
        border: 2px solid var(--color-white);
        min-height: 4lh;
        resize: vertical;
        field-sizing: content;
    }
    button[type="submit"] {
        display: flex;
        flex-direction: row;
        gap: 1rem;
        padding: 0.4rem 1rem;
        justify-content: center;
        align-items: center;
        font-size: 1.25rem;
        text-transform: uppercase;
        font-family: 'Atkinson Hyperlegible';
        border: 2px solid var(--color-primary);
        border-radius: 1rem;
        background-image: linear-gradient(
            45deg,
            var(--color-white),
            #0000,
        );
    }
    button[type="submit"]:hover, button[type="submit"]:focus-visible {
        background-image: linear-gradient(
            to left,
            #0000,
            var(--color-primary)
        );
    }
</style>
