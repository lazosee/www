---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import { PostCard, Separator } from '../components/main';
import { formatDate } from '../helpers';

type Props = {
    post: CollectionEntry<'post'>;
    category?: CollectionEntry<'category'>;
}
const { post, category } = Astro.props;

const relatedPosts: (Props['post']['data'] & { slug: string })[] = []
if (post.data.related) {
    for (const r in post.data.related) {
        const rPost = await getEntry('post', post.data.related[r]);
        if (rPost) {
            relatedPosts.push({ ...rPost.data, slug: rPost.slug})
        }
    }
}
---

<div class="container">
<section data-article="section">
    <article>
        <header>
            <a class="category" href={`/categories/${category?.id}`} hreflang="en-us">
                <span>
                    <ion-icon 
                        class="category-icon" 
                        name={category?.data.icon}
                        size="medium"
                        color="black"
                        style="font-weight: bold;"
                    ></ion-icon>
                </span>
                <span>{category?.data.title}</span>
            </a>
            <h1>{post.data.title}</h1>
            <div class="meta">
                <time datetime={post.data.published_at.toISOString()}>
                    {formatDate(post.data.published_at)}
                </time>
                <span>â€¢</span>
                <div>
                    {post.data.tags.map(tag => (
                        <small data-tag="true">{tag}</small>
                    ))}
                </div>
            </div>
            <p role="contentinfo" class="subtitle">{post.data.summary}</p>
            <Image class="square-diag" src={post.data.image} alt={post.data.title} loading="eager" format='avif' />
        </header>
        
        <Separator color='#efefef' />
        <slot />
    </article>
</section>

{relatedPosts.length > 0 && (
    <Separator color='#efefef' />
    <section class="related-posts">
        <h2>Related Posts</h2>
        {relatedPosts.map(p => (
            <PostCard post={p} />
        ))}
    </section>
)}
</div>

<style>
    .container {
        max-width: min(120ch, 100%);
        width: 100%;
        justify-items: center;
        align-content: center;
        overflow-x: hidden;
        border: 2px solid red;
    }
    section {
        display: flex;
        flex-direction: column;
        max-width: min(100ch, 100%);
        padding: 1rem 0.6rem;
        justify-items: center;
        align-content: center;
    }
    [data-article="section"] {}
    .related-posts {}
    article {}
    article header {
        justify-items: center;
        place-items: center;
        align-content: center;
        text-align: center;
        text-wrap: balance;
        margin-block: 2rem;
    }
    header img {
        width: 100%;
        height: auto;
        aspect-ratio: 4/3;
        object-fit: cover;
        border: 2px solid #efefef;
        border-radius: 2rem;
        background-position: fixed;
    }
    header a.category {
        --ionicon-stroke-width: 48px;
        position: relative;
        display: flex;
        font-family: 'Atkinson Hyperlegible', 'Roboto', Verdana, Geneva, Tahoma, sans-serif;
        font-size: clamp(1.1rem, calc(2% + 1rem), 1.6rem);
        text-underline-offset: 0.3rem;
        text-decoration: none;
        justify-content: center;
        align-items: center;
        gap: 0.6rem;
        color: rgb(2, 61, 61);

        &:hover::after {
            content: '';
            position: absolute;
            bottom: -0.1rem;
            width: 100%;
            height: 2px;
            background-color: rgb(2, 61, 61);
        }

        span {
            display: inline-flex;
            justify-content: center;
            align-items: center;
        }
        .category-icon {
            font-weight: bold;
        }
    }
    header h1 {
        margin-block: 1rem;
    }
    header .meta {
        width: min(60ch, 100%);
        display: flex;
        justify-content: center;
        align-items: center;
    }
    header .meta time {
        font-family: 'Syne Variable', 'Syne', 'Roboto', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    header .meta > span {
        margin-inline: min(0.4rem, 2vw);
    }
    header .meta div {
        display: flex;
        justify-content: center;
        gap: 0.2rem;

        div {
            display: flex;
            flex-wrap: wrap;
        }
    }
    header .meta [data-tag] {
        position: relative;
        font-family: 'Atkinson Hyperlegible';
        color: rgb(2, 61, 61);
        font-family: 'Syne Variable';
        font-size: 100%;
        padding-inline: 0.2rem;
    }
    header .meta [data-tag]::before {
        content: '#';
        /* position: absolute; */
        left: 0;
    }

    @media (min-width: 640px) {
        header img {
            aspect-ratio: 16/9;
        }
    }
</style>