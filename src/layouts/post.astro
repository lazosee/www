---
import type { MarkdownHeading } from 'astro';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import { PostCard, Separator } from '../components/main';
import { formatDate, sharePost } from '../helpers';

type Props = {
    post: CollectionEntry<'post'>;
    headings: MarkdownHeading[];
    category?: CollectionEntry<'category'>;
}
const { post, category, headings } = Astro.props;

const relatedPosts: (Props['post']['data'] & { slug: string })[] = []
if (post.data.related) {
    for (const r in post.data.related) {
        const rPost = await getEntry('post', post.data.related[r]);
        if (rPost) {
            relatedPosts.push({ ...rPost.data, slug: rPost.slug})
        }
    }
}

const url = (path: string ) => (new URL(path, (Astro.site as URL))).href
// const { src } = await getImage({ src: post.data.image, format: 'avif', quality: 'max' })

const shareLinks = sharePost(url(`/posts/${post.slug}`));
---

<div class="container">
<section data-article="section">
    <article>
        <header>
            <a class="category" href={`/categories/${category?.id}`} hreflang="en-us">
                <span>
                    <ion-icon 
                        class="category-icon" 
                        name={category?.data.icon}
                        size="medium"
                        color="black"
                        style="font-weight: bold;"
                    ></ion-icon>
                </span>
                <span>{category?.data.title}</span>
            </a>
            <h1>{post.data.title}</h1>
            <div class="meta">
                <time datetime={post.data.published_at.toISOString()}>
                    {formatDate(post.data.published_at)}
                </time>
                <span class="dot">â€¢</span>
                <div>
                    {post.data.tags.map(tag => (
                        <small data-tag="true">{tag}</small>
                    ))}
                </div>
            </div>
            <div class="share">
                <div>Share Post</div>
                <div>
                    {shareLinks.map(social => (
                        <a href={social.link} hreflang="en-us" target="_blank" aria-label={social.platform}>
                            {social.platform == 'bluesky' && (
                                <i class="fa-brands fa-bluesky"></i>
                            )}
                            {social.platform == 'facebook' && (
                                <i class="fa-brands fa-facebook-f"></i>
                            )}
                            {social.platform == 'linkedin' && (
                                <i class="fa-brands fa-linkedin"></i>
                            )}
                            {social.platform == 'telegram' && (
                                <i class="fa-brands fa-telegram"></i>
                            )}
                            {social.platform == 'twitter' && (
                                <i class="fa-brands fa-x-twitter"></i>
                            )}
                        </a>
                    ))}
                </div>
            </div>
            <Image class="square-diag" src={post.data.image} alt={post.data.title} loading="eager" format='avif' />
            <p role="contentinfo" class="subtitle">{post.data.summary}</p>
        </header>
        
        <Separator color='#efefef' />
        <slot />
    </article>
    <Separator color='#efefef' />
    <div class="share">
        <div>Share Post</div>
        <div>
            {shareLinks.map(social => (
                <a href={social.link} hreflang="en-us" target="_blank" aria-label={social.platform}>
                    {social.platform == 'bluesky' && (
                        <i class="fa-brands fa-bluesky"></i>
                    )}
                    {social.platform == 'facebook' && (
                        <i class="fa-brands fa-facebook-f"></i>
                    )}
                    {social.platform == 'linkedin' && (
                        <i class="fa-brands fa-linkedin"></i>
                    )}
                    {social.platform == 'telegram' && (
                        <i class="fa-brands fa-telegram"></i>
                    )}
                    {social.platform == 'twitter' && (
                        <i class="fa-brands fa-x-twitter"></i>
                    )}
                </a>
            ))}
        </div>
    </div>
    
    {relatedPosts.length > 0 && (
        <div class="related-posts">
            <h2>Related Posts</h2>
            {relatedPosts.map(p => (
                <PostCard post={p} />
            ))}
        </div>
    )}
</section>

<section class="giscus" style="max-width: 100%;"></section>

<button id="toc-open-btn" class="toc-btns" data-direction="left">
    <span class="material-symbols-outlined">
        keyboard_double_arrow_left
    </span>
</button>
<aside id="toc" inert>
    <div class="headings">
        <h2 style="font-family: 'Atkinson Hyperlegible';">
            Table of Contents
        </h2>
        <hr />
        <ol>
            {headings.map((heading) => (
                <li>
                    <a href={`#${heading.slug}`}>{heading.text}</a>
                </li>
            ))}
        </ol>
    </div>
</aside>
</div>

<script>
    const openTocButton = document.getElementById('toc-open-btn') as HTMLButtonElement;
    const aside = document.getElementById('toc') as HTMLElement;

    openTocButton.addEventListener('click', function(this) {
        aside.classList.toggle('show')
        this.querySelector('span')!.textContent = aside.classList.contains('show') ? 'keyboard_double_arrow_right' : 'keyboard_double_arrow_left'
    })
</script>

<style>
    .container {
        position: relative;
        max-width: min(120ch, 100%);
        width: 100%;
        justify-items: center;
        align-content: center;
        overflow-x: hidden;
    }
    section {
        display: flex;
        flex-direction: column;
        max-width: min(100ch, 100%);
        padding: 1rem 0.6rem;
        justify-items: center;
        align-content: center;
    }
    [data-article="section"] {}
    .related-posts {}
    article {
        /* justify-items: flex-start;
        align-content: center; */
        width: 100%;
        margin-inline: 0.2rem;
    }
    article header {
        justify-items: center;
        place-items: center;
        align-content: center;
        text-align: center;
        text-wrap: balance;
        margin-block: 2rem;
    }
    header img {
        width: 100%;
        height: auto;
        aspect-ratio: 4/3;
        object-fit: cover;
        border: 2px solid #efefef;
        border-radius: 2rem;
        background-position: fixed;
        mask: linear-gradient(#fff, #fff 40%, transparent 90%);
    }
    header a.category {
        --ionicon-stroke-width: 48px;
        position: relative;
        display: flex;
        font-family: 'Atkinson Hyperlegible', 'Roboto', Verdana, Geneva, Tahoma, sans-serif;
        font-size: clamp(1.1rem, calc(2% + 1rem), 1.6rem);
        text-underline-offset: 0.3rem;
        text-decoration: none;
        justify-content: center;
        align-items: center;
        gap: 0.6rem;
        color: rgb(2, 61, 61);

        &:hover::after {
            content: '';
            position: absolute;
            bottom: -0.1rem;
            width: 100%;
            height: 2px;
            background-color: rgb(2, 61, 61);
        }

        span {
            display: inline-flex;
            justify-content: center;
            align-items: center;
        }
        .category-icon {
            font-weight: bold;
        }
    }
    header h1 {
        margin-block: 1rem;
    }
    header .meta {
        width: min(60ch, 100%);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    header .meta > * {
        margin-bottom: 0.4rem;
        font-size: 1.05rem;
    }
    header .meta .dot {
        display: none;
    }
    header .meta time {
        font-family: 'Syne Variable', 'Syne', 'Roboto', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    header .meta > span {
        margin-inline: min(0.4rem, 2vw);
    }
    header .meta div {
        display: flex;
        justify-content: center;
        gap: 0.2rem;

        div {
            display: flex;
            flex-wrap: wrap;
        }
    }
    header .meta [data-tag] {
        position: relative;
        font-family: 'Atkinson Hyperlegible';
        color: rgb(2, 61, 61);
        font-family: 'Syne Variable';
        font-size: 100%;
        padding-inline: 0.2rem;
    }
    header .meta [data-tag]::before {
        content: '#';
        /* position: absolute; */
        left: 0;
    }
    header p.subtitle {
        margin-block-start: -5rem;
    }
    .share {
        display: flex;
        width: 100%;
        margin-block: 1.6rem;
        flex-direction: column;
        box-sizing: border-box;
        justify-content: space-evenly;
        align-items: center;
    }
    header .share {
        width: 80%;
    }
    .share div:first-of-type {
        font-size: 1.4rem;
        font-family: 'Atkinson Hyperlegible';
    }
    .share div:last-of-type {
        & {
            display: flex;
            justify-content: space-evenly;
            align-items: baseline;
        }
        a {
            & {
                display: flex;
                margin: 0.2rem 0.4rem;
                background-color: transparent;
                text-decoration: none;
            }

            .fa-brands {
                & {
                    font-size: 1.6rem;
                    transition: all 0.3s ease;
                }

                &:hover {
                    scale: 1.2;
                }
            }
            .fa-bluesky {
                color: #1877f2;
            }
            .fa-facebook-f {
                color: #3b5998;
            }
            .fa-linkedin {
                color: #0a66c2;
            }
            .fa-telegram {
                color:  #0088cc;
                font-size: 1.6rem;
            }
            .fa-x-twitter {
                color: #000000;
            }
        }
    }

    section.related-posts {
        justify-items: center;
        align-content: center;
        text-align: center;
        background: #cfcfcfcf;
    }

    #toc-open-btn {
        position: fixed;
        top: 50%;
        right: -0.2rem;
        transform: translateY(-50%);
        z-index: 25;
    }
    .toc-btns {
        & {
            display: block;
            justify-self: center;
            justify-items: center;
            align-content: center;
            align-self: center;
            width: fit-content;
            aspect-ratio: 1;
            z-index: 23;
            font-size: 1.8rem;
            color: #3f3f3f;
            border: 2px solid #3f3f3f;
            border-right: none;
            background-color: #efefef6f;
            border-radius: 0.2rem;
        }
        
        span {
            width: 100%;
            height: 100%;
            padding: 0.4rem;
            font-size: 1.8rem;
            justify-self: center;
            justify-items: center;
            align-content: center;
            align-self: center;
        }
    }
    aside {
        position: fixed;
        right: 0;
        top: 50%;
        transform: translateY(-50%);
        margin: 1rem;
        padding: 1rem;
        background: #efefef;
        justify-items: center;
        align-content: center;
        max-width: min(30ch, 70%);
        border: 2px solid #afafaf;
        border-radius: 0.4rem;
        z-index: 13;
        overflow: auto;
        transition: all 0.8s ease;
    }
    aside {
        h2 {
            font-size: 1.8rem;
            font-family: 'Atkinson Hyperlegible' !important;
            text-align: center;
        }
        button#toc-close-btn {
            justify-self: flex-start;
        }
        ul, ol {
            & {}
            li {
                & {
                    padding: 0.2rem 0.4rem;
                    margin-block: 0.4rem;
                    list-style: lower-roman;
                }
                &::marker {
                    font-size: 0.8rem;
                    color: rgb(2, 61, 61);
                }
                a {
                    text-underline-offset: 0.2rem;
                    font-family: 'Atkinson Hyperlegible';
                }
            }
        }
    }

    @media (max-width: 640px) {
        aside {
            right: calc(min(30ch, 70%) * -1.2);
        }
        aside.show {
            right: 0;
        }
    }
    @media (min-width: 640px) {
        header img {
            aspect-ratio: 16/9;
        }
        header .meta {
            flex-direction: row;
        }
        header .meta .dot {
            display: flex;
        }
        .share {
            flex-direction: row;
        }
        .toc-btns {
            display: none;
        }
    }
</style>